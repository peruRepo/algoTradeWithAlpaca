{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/back-test-browse/back-test-browse.component.ts","webpack:///src/app/back-test-browse/back-test-browse.component.html","webpack:///src/app/back-test-edit/back-test-edit.component.ts","webpack:///src/app/back-test-edit/back-test-edit.component.html","webpack:///src/app/shared/backTestResponse.ts","webpack:///src/app/shared/csvUtil.service.ts","webpack:///src/app/shared/rest-api.service.ts","webpack:///src/app/shared/stockTradeStrategy.ts","webpack:///src/app/trade-strategy-browse/trade-strategy-browse.component.ts","webpack:///src/app/trade-strategy-browse/trade-strategy-browse.component.html","webpack:///src/app/trade-strategy-edit/trade-strategy-edit.component.ts","webpack:///src/app/trade-strategy-edit/trade-strategy-edit.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","providers","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","bootstrap","BackTestBrowseComponent","restApi","backTestStrategies","getAllBackTestStrategy","subscribe","data","loadAllBackTestStrategy","strategyName","window","confirm","deleteBackTestStrategy","BackTestEditComponent","actRoute","router","csvUtil","snapshot","params","backTestStrategy","backTestResponse","profitDataSeries","timeSeriesData","eChartDataSeries","dynamicData","intervalDurationOptions","loading","errorMessage","initialValue","xAxis","type","splitNumber","yAxis","name","nameLocation","series","console","log","getBackTestStrategyWithParam","getBackTestStrategy","backTestRequest","executeBackTestStrategy","profitOrLoss","profitPercentage","formDataforChart","trades","error","backTestTrades","i","backTestTrade","profitAndTime","push","exitTime","headerList","fileName","ticker","downloadFile","downloadCSV","BackTestResponse","CSVUtil","filename","csvData","ConvertToCSV","blob","Blob","dwldLink","document","createElement","url","URL","createObjectURL","isSafariBrowser","navigator","userAgent","indexOf","setAttribute","style","visibility","body","appendChild","click","removeChild","objArray","array","JSON","parse","str","row","index","slice","length","line","head","providedIn","RestApiService","http","apiURL","httpOptions","headers","get","pipe","handleError","stockTradeStrategy","post","stringify","status","ErrorEvent","message","alert","StockTradeStrategy","TradeStrategyBrowseComponent","stockTradeStrategies","getAllStockTradeStrategy","loadAllStockStrategy","deleteStockTradeStrategy","TradeStrategyEditComponent","reEnterOptions","tradeStrategyStates","timeUnit","queryParams","getStockTradeStrategyFromParam","getStockTradeStrategy","quantity","interval","intervalDuration","state","candleCount","tradeStrategy","stockWatch","reenter","saveStockTradeStrategy","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TradeStrategyEditComponent } from './trade-strategy-edit/trade-strategy-edit.component';\nimport { BackTestEditComponent } from './back-test-edit/back-test-edit.component';\nimport { BackTestBrowseComponent } from './back-test-browse/back-test-browse.component';\nimport { TradeStrategyBrowseComponent } from './trade-strategy-browse/trade-strategy-browse.component';\n\nconst routes: Routes = [\n  { path: '', component: TradeStrategyBrowseComponent },\n  { path: 'trade-strategy-browse', component: TradeStrategyBrowseComponent },\n  { path: 'trade-strategy-edit', component: TradeStrategyEditComponent },\n  { path: 'back-test-edit', component: BackTestEditComponent },\n  { path: 'back-test-browse', component: BackTestBrowseComponent },\n  { path: 'back-test-browse/back-test-edit/:strategyName', component: BackTestEditComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers : []\n})\n\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'alpca-tradeStrategy-app';\n}\n","<div class=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\n  <nav class=\"my-2 my-md-0 mr-md-3\">\n    <a class=\"btn btn-outline-primary\" routerLinkActive=\"active\" routerLink=\"/back-test-browse\">Back Test Browse</a>\n  </nav>\n  <nav class=\"my-2 my-md-0 mr-md-3\">\n    <a class=\"btn btn-outline-primary\" routerLinkActive=\"active\" routerLink=\"/back-test-edit\">Back Test Edit</a>\n  </nav>\n  <nav class=\"my-2 my-md-0 mr-md-3\">\n    <a class=\"btn btn-outline-primary\" routerLinkActive=\"active\" routerLink=\"/trade-strategy-browse\">Trade Strategy Browse</a>\n  </nav>\n  <nav class=\"my-2 my-md-0 mr-md-3\">\n    <a class=\"btn btn-outline-primary\" routerLinkActive=\"active\" routerLink=\"/trade-strategy-edit\">Trade Strategy Edit</a>\n  </nav>\n</div>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n// HttpClient module for RESTful API\nimport { HttpClientModule } from '@angular/common/http';\n\n// Routing module for router service\nimport { AppRoutingModule } from './app-routing.module';\n\n// Forms module\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxEchartsModule } from 'ngx-echarts';\n\n// Components\nimport { TradeStrategyEditComponent } from './trade-strategy-edit/trade-strategy-edit.component';\nimport { TradeStrategyBrowseComponent } from './trade-strategy-browse/trade-strategy-browse.component';\nimport { BackTestEditComponent } from './back-test-edit/back-test-edit.component';\nimport { BackTestBrowseComponent } from './back-test-browse/back-test-browse.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TradeStrategyEditComponent,\n    TradeStrategyBrowseComponent,\n    BackTestEditComponent,\n    BackTestBrowseComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    NgxEchartsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { RestApiService } from \"../shared/rest-api.service\";\nimport { BackTestStrategy } from '../shared/backTestStrategy';\n\n\n@Component({\n  selector: 'back-test-browse',\n  templateUrl: './back-test-browse.component.html',\n  styleUrls: ['./back-test-browse.component.css']\n})\nexport class BackTestBrowseComponent implements OnInit {\n\n  backTestStrategies: BackTestStrategy[] = [];\n\n  constructor(public restApi: RestApiService) { }\n\n\n\n  // Get All Back TestStrategy list\n  loadAllBackTestStrategy() {\n    this.restApi.getAllBackTestStrategy().subscribe((data : BackTestStrategy[]) => {\n      this.backTestStrategies = data ;\n    }\n    );\n};\n\n  ngOnInit() :void  {\n    this.loadAllBackTestStrategy();\n  }\n  // Delete Back Test Strategy\n deleteBackTestStrategy(strategyName) {\n    if (window.confirm('Are you sure, you want to delete?')){\n      this.restApi.deleteBackTestStrategy(strategyName).subscribe( data => {\n         this.loadAllBackTestStrategy();\n      });\n\n    }\n  }\n\n}\n","<div class=\"container custom-container-2\">\n\n  <!-- Show it when there is no employee -->\n  <div class=\"no-data text-center\">\n    <p>Click here to backtest more Strategy</p>\n    <button class=\"btn btn-outline-primary\" routerLink=\"/back-test-edit\">Add BackTest Strategy</button>\n  </div>\n\n  <!-- Employees list table, it hides when there is no employee -->\n  <div *ngIf=\"backTestStrategies.length !== 0\">\n    <h3 class=\"mb-3 text-center\">Browse BackTest Strategy</h3>\n\n    <div class=\"col-md-12\">\n      <table class=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Strategy Name</th>\n            <th scope=\"col\">Ticker</th>\n            <th scope=\"col\">IntervalDuration</th>\n            <th scope=\"col\">profit Percentage </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let backTestStrategy of backTestStrategies\">\n            <td>{{backTestStrategy.strategyName}}</td>\n            <td>{{backTestStrategy.backTestRequest.ticker}}</td>\n            <td>{{backTestStrategy.backTestRequest.intervalDuration}}</td>\n            <td>{{backTestStrategy.profitPercentage}}</td>\n            <td>\n              <span class=\"edit\" routerLink=\"back-test-edit/{{backTestStrategy.strategyName}}\">Edit</span>\n              <span class=\"delete\" (click)=\"deleteBackTestStrategy(backTestStrategy.strategyName)\">Delete</span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { RestApiService } from \"../shared/rest-api.service\";\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {BackTestRequest } from \"../shared/backTestRequest\";\nimport {BackTestResponse } from \"../shared/backTestResponse\";\nimport {BackTestStrategy } from \"../shared/backTestStrategy\";\nimport { EChartOption } from 'echarts';\nimport { CSVUtil } from '../shared/csvUtil.service';\n\n@Component({\n  selector: 'back-test-edit',\n  templateUrl: './back-test-edit.component.html',\n  styleUrls: ['./back-test-edit.component.css']\n})\n\nexport class BackTestEditComponent implements OnInit {\n  strategyName = this.actRoute.snapshot.params['strategyName'];\n  backTestStrategy: any = {\n        \"strategyName\": \"Enter your Back test name here!!\",\n        \"backTestRequest\":{\n        \"strategyName\": \"Enter your Back test name here\",\n        \"ticker\": \"Enter your Stock name here!!\",\n        \"quantity\": 10,\n        \"intervalDuration\": \"ONE_MIN\",\n        \"tradeStrategy\":{\n          \"entryConditions\": \"function(barSeries, stockWatch){ \\n\\tclosePriceIndicator = new ClosePriceIndicator(barSeries);\\n\\tif(closePriceIndicator.getValue(barSeries.getEndIndex()).floatValue() < 568){\\n\\t\\tstockWatch.setStopLossPercentage(10.0);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\",\n          \"entrySignal\": \"buy\",\n          \"exitSignal\": \"sell\",\n          \"exitConditions\": \"function(barSeries, stockWatch){ \\n\\tclosePriceIndicator = new ClosePriceIndicator(barSeries);\\n\\tif(closePriceIndicator.getValue(barSeries.getEndIndex()).floatValue() > 569){\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\"\n        },\n        \"stockWatch\":{\n        \"stopLossPercentage\": -10.0,\n        \"profitPercentage\": 0.0,\n        \"targetProfitPercentage\": 15.0\n        },\n        \"candleCount\": 1000\n        },\n        \"profitOrLoss\": 0,\n        \"profitPercentage\": 0\n};\n  backTestResponse : BackTestResponse = new BackTestResponse();\n  profitDataSeries : number[] = [];\n  timeSeriesData : Date[] = [];\n  eChartDataSeries : any [] = [];\n   dynamicData : any = {};\n  intervalDurationOptions : string[] = [\"ONE_MIN\",\"FIVE_MINUTE\",\"FIFTEEN_MINUTE\",\"ONE_DAY\"];\n  loading : boolean = false;\n  errorMessage : string = \"\";\n\n  constructor(\n    public restApi: RestApiService,\n    public actRoute: ActivatedRoute,\n    public router: Router,\n    public csvUtil : CSVUtil\n  ) {\n    this.actRoute.params.subscribe( params => {\n      console.log(params);\n      this.strategyName = params[\"strategyName\"];\n       }\n    );\n\n  }\n\n  ngOnInit() {\n    this.getBackTestStrategyWithParam();\n   }\n\n  getBackTestStrategyWithParam() {\n    this.restApi.getBackTestStrategy(this.strategyName).subscribe(data => {\n      this.backTestStrategy = data;\n    })\n  }\n\n\n  getBackTestStrategy() {\n    this.restApi.getBackTestStrategy(this.backTestStrategy.backTestRequest.strategyName).subscribe(data => {\n      this.backTestStrategy = data;\n    })\n  }\n\n  // Update employee data\n  executeBackTestStrategy() {\n    this.loading = true;\n    this.restApi.executeBackTestStrategy(this.backTestStrategy.backTestRequest).subscribe(data => {\n      this.backTestResponse = data;\n      this.backTestStrategy.profitOrLoss = this.backTestResponse.profitOrLoss;\n      this.backTestStrategy.profitPercentage = this.backTestResponse.profitPercentage;\n      this.formDataforChart(this.backTestResponse.trades);\n      this.loading = false;\n    },\n    error =>\n    {\n    this.errorMessage = error;\n    this.loading = false;\n  }\n  )\n  //  this.loading = false;\n  }\n\n  formDataforChart(backTestTrades) {\n    let i = 0;\n    let eChartDataSeries = [];\n    for(let backTestTrade of backTestTrades){\n       let profitAndTime = [];\n       profitAndTime.push(backTestTrade.exitTime);\n       profitAndTime.push(backTestTrade.profitOrLoss);\n       eChartDataSeries.push(profitAndTime);\n    }\n    let data = {\n      data : eChartDataSeries,\n      type : 'bar'\n    };\n    this.dynamicData=this.initialValue;\n    this.dynamicData.series = [];\n    this.dynamicData.series.push(data);\n  }\n\n   downloadCSV() {\n     let headerList = ['entryTime', 'entrySignal', 'priceAtEntry', 'exitTime', 'exitSignal', 'priceAtExit','profitOrLoss'];\n     let fileName = \"ExecutedTradesFor-\"+this.backTestStrategy.backTestRequest.ticker;\n     this.csvUtil.downloadFile(this.backTestResponse.trades,fileName,headerList);\n   }\n\n  initialValue: EChartOption = {\n    xAxis: {\n      type: 'time',\n      splitNumber : 20\n    },\n    yAxis: {\n      type: 'value',\n      name : '$',\n      nameLocation: 'middle'\n    },\n    series: [{\n      data : [],\n      type: 'line'\n    }]\n  }\n\n}\n","<div class=\"container custom-container\">\n  <div class=\"col-md-12\">\n\n    <h3 class=\"mb-3 text-center\">Back Test your Strategy </h3>\n\n    <div class=\"form-group\">\n      <label>Stratey Name</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.strategyName\" class=\"form-control\" placeholder=\"StrategyName\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>Ticker</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.ticker\" class=\"form-control\" placeholder=\"Ticker\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>IntervalDuration</label>\n      <select [(ngModel)]=\"backTestStrategy.backTestRequest.intervalDuration\" class=\"form-control\">\n        <option *ngFor=\"let option of intervalDurationOptions\">\n          {{option}}\n        </option>\n      </select>\n      <!--\n        <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.intervalDuration\" class=\"form-control\" placeholder=\"IntervalDuration\">\n        -->\n\n    </div>\n    <div class=\"form-group\">\n      <label>Quantity</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.quantity\" class=\"form-control\" placeholder=\"Quantity\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>CandleCount</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.candleCount\" class=\"form-control\" placeholder=\"CandleCount\">\n    </div>\n\n\n\n    <div class=\"form-group\">\n      <label>StopLossPercentage</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.stockWatch.stopLossPercentage\" class=\"form-control\" placeholder=\"Stop Loss Percentage\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>Target Profit Percentage</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.stockWatch.profitPercentage\" class=\"form-control\" placeholder=\"Target Profit Percentage\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>Profit or Loss</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.profitOrLoss\" class=\"form-control\" placeholder=\"Profit Or Loss\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>Profit or Loss Percentage</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.profitPercentage\" class=\"form-control\" placeholder=\"Profit Or Loss Percentage\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>EntryConditions</label>\n      <br>\n        <textarea rows = \"15\" cols = \"80\" [(ngModel)]=\"backTestStrategy.backTestRequest.tradeStrategy.entryConditions\"  placeholder=\"Entry Condition\">\n          Enter entry condition here\n        </textarea>\n      <br>\n    </div>\n\n    <div class=\"form-group\">\n      <label>EntrySignal</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.tradeStrategy.entrySignal\" class=\"form-control\" placeholder=\"Entry Signal\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>ExitConditions</label>\n      <br>\n        <textarea rows = \"15\" cols = \"80\" [(ngModel)]=\"backTestStrategy.backTestRequest.tradeStrategy.exitConditions\" placeholder=\"Exit Condition\">\n          Enter exit condition here\n        </textarea>\n      <br>\n    </div>\n\n    <div class=\"form-group\">\n      <label>ExitSignal</label>\n      <input type=\"text\" [(ngModel)]=\"backTestStrategy.backTestRequest.tradeStrategy.exitSignal\" class=\"form-control\" placeholder=\"Exit Signal\">\n    </div>\n\n\n    <div class=\"form-group\">\n      <button class=\"btn btn-success btn-lg btn-block\" (click)=\"getBackTestStrategy()\">fetch</button>\n    </div>\n\n    <div class=\"form-group\" *ngIf=\"!loading\">\n      <button class=\"btn btn-success btn-lg btn-block\" (click)=\"executeBackTestStrategy()\">Execute Back Test</button>\n    </div>\n\n    <div class=\"form-group\" *ngIf=\"!loading\">\n      <span class=\"btn btn-success btn-lg btn-block\" [routerLink]=\"['/trade-strategy-edit']\"  [queryParams]=\"{ strategyName: backTestStrategy.backTestRequest.strategyName }\">Deploy Back Test</span>\n    </div>\n\n    <div class=\"app-loading\" *ngIf=\"loading\">\n      <div class=\"logo\"></div>\n     <svg class=\"spinner\" viewBox=\"25 25 50 50\">\n       <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\n     </svg>\n   </div>\n\n\n    <div class=\"form-group\">\n    <button (click)=\"downloadCSV()\"> Download Trades </button>\n    </div>\n    <div echarts [options]=\"initialValue\" [merge]= \"dynamicData\" class=\"demo-chart\"></div>\n  </div>\n</div>\n","import { BackTestTrade } from './backTestTrade';\n\nexport class BackTestResponse {\n  profitPercentage : number;\n  profitOrLoss : number;\n  trades : Array<BackTestTrade>;\n\n}\n","import { Injectable } from '@angular/core';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CSVUtil {\n\n    downloadFile(data, filename, headerList) {\n        let csvData = this.ConvertToCSV(data, headerList);\n        console.log(csvData)\n        let blob = new Blob(['\\ufeff' + csvData], { type: 'text/csv;charset=utf-8;' });\n        let dwldLink = document.createElement(\"a\");\n        let url = URL.createObjectURL(blob);\n        let isSafariBrowser = navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;\n        if (isSafariBrowser) {  //if Safari open in new window to save file with random filename.\n            dwldLink.setAttribute(\"target\", \"_blank\");\n        }\n        dwldLink.setAttribute(\"href\", url);\n        dwldLink.setAttribute(\"download\", filename + \".csv\");\n        dwldLink.style.visibility = \"hidden\";\n        document.body.appendChild(dwldLink);\n        dwldLink.click();\n        document.body.removeChild(dwldLink);\n    }\n\n    ConvertToCSV(objArray, headerList) {\n        let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n        let str = '';\n        let row = 'S.No,';\n        for (let index in headerList) {\n            row += headerList[index] + ',';\n        }\n        row = row.slice(0, -1);\n        str += row + '\\r\\n';\n        for (let i = 0; i < array.length; i++) {\n            let line = (i + 1) + '';\n            for (let index in headerList) {\n                let head = headerList[index];\n                line += ',' + array[i][head];\n            }\n            str += line + '\\r\\n';\n        }\n        return str;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { StockTradeStrategy } from './stockTradeStrategy';\nimport { BackTestStrategy } from './backTestStrategy';\nimport { BackTestRequest } from './backTestRequest';\nimport { BackTestResponse } from './backTestResponse';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RestApiService {\n\n  // Define API\n  apiURL = 'http://localhost:8080';\n\n  constructor(private http: HttpClient) { }\n\n  /*========================================\n    CRUD Methods for consuming RESTful API\n  =========================================*/\n\n  // Http Options\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n\n  getAllStockTradeStrategy (): Observable<StockTradeStrategy[]> {\n    return this.http.get<StockTradeStrategy[]>(this.apiURL + '/alpaca/strategy/getAllStrategy')\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  };\n\n  getAllBackTestStrategy (): Observable<BackTestStrategy[]> {\n    return this.http.get<BackTestStrategy[]>(this.apiURL + '/alpaca/backtest/getAllBackTest')\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  };\n\n  getStockTradeStrategy(ticker): Observable<StockTradeStrategy> {\n    return this.http.get<StockTradeStrategy>(this.apiURL + '/alpaca/strategy/getStrategy?ticker=' + ticker)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  getBackTestStrategy(strategyName): Observable<BackTestStrategy> {\n    return this.http.get<BackTestStrategy>(this.apiURL + '/alpaca/backtest/getBackTest?strategyName=' + strategyName)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  saveStockTradeStrategy(stockTradeStrategy): Observable<StockTradeStrategy> {\n    return this.http.post<StockTradeStrategy>(this.apiURL + '/alpaca/strategy/updateStrategy', JSON.stringify(stockTradeStrategy), this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  executeBackTestStrategy(backTestRequest): Observable<BackTestResponse> {\n    return this.http.post<BackTestResponse>(this.apiURL + '/alpaca/backtest/execute', JSON.stringify(backTestRequest), this.httpOptions)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n\n  deleteStockTradeStrategy(ticker) : Observable<any> {\n    return this.http.delete<any>(this.apiURL + '/alpaca/strategy/removeStrategy?ticker=' + ticker)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  deleteBackTestStrategy(strategyName) : Observable<any> {\n    return this.http.delete<any>(this.apiURL + '/alpaca/backtest/remove?strategyName=' + strategyName)\n    .pipe(\n      retry(1),\n      catchError(this.handleError)\n    )\n  }\n\n  handleError(error) {\n     let errorMessage = '';\n     if(error.status == 0 || error.status == 200) {\n       return;\n     }\n     if(error.error instanceof ErrorEvent) {\n       // Get client-side error\n       errorMessage = error.error.message;\n     } else {\n       // Get server-side error\n       errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n     }\n     window.alert(errorMessage);\n    return throwError(errorMessage);\n  //  return errorMessage;\n  }\n\n}\n","import { TradeStrategy } from './tradeStrategy';\nimport { StockWatch } from './stockWatch';\n\nexport class StockTradeStrategy {\n\n   ticker: string;\n   quantity: number;\n   interval: number;\n   timeUnit: string;\n   intervalDuration: string;\n   tradeStrategy: TradeStrategy;\n   state: string;\n   stockWatch: StockWatch;\n   candleCount: number;\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { RestApiService } from \"../shared/rest-api.service\";\nimport { StockTradeStrategy } from '../shared/stockTradeStrategy';\n\n\n@Component({\n  selector: 'app-employees-list',\n  templateUrl: './trade-strategy-browse.component.html',\n  styleUrls: ['./trade-strategy-browse.component.css']\n})\nexport class TradeStrategyBrowseComponent implements OnInit {\n\n  stockTradeStrategies: StockTradeStrategy[] = [];\n\n  constructor(public restApi: RestApiService) { }\n\n\n\n  // Get AllStockStrategy list\n  loadAllStockStrategy() {\n    this.restApi.getAllStockTradeStrategy().subscribe((data : StockTradeStrategy[]) => {\n      this.stockTradeStrategies = data ;\n    }\n    );\n\n\n\n//      {next : stockTradeStrategies => {\n//      this.stockTradeStrategies = stockTradeStrategies;\n//    }\n//  });\n};\n\n  ngOnInit() :void  {\n    this.loadAllStockStrategy();\n  }\n\ndeleteStockStrategy(id) {\n   if (window.confirm('Are you sure, you want to delete?')){\n   this.restApi.deleteStockTradeStrategy(id).subscribe(data => {\n     this.loadAllStockStrategy()\n   })\n   }\n }\n\n}\n","<div class=\"container custom-container-2\">\n\n  <!-- Show it when there is no employee -->\n  <div class=\"no-data text-center\">\n    <p>Click here to add more Stock Trade Strategy</p>\n    <button class=\"btn btn-outline-primary\" routerLink=\"trade-strategy-edit\">Add Stock Trade Strategy</button>\n  </div>\n\n  <!-- Employees list table, it hides when there is no employee -->\n  <div *ngIf=\"stockTradeStrategies.length !== 0\">\n    <h3 class=\"mb-3 text-center\">Browse Stock Trade Strategy</h3>\n\n    <div class=\"col-md-12\">\n      <table class=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Ticker</th>\n            <th scope=\"col\">Interval</th>\n            <th scope=\"col\">IntervalDuration</th>\n            <th scope=\"col\">TimeUnit</th>\n            <th scope=\"col\">State</th>\n            <th scope=\"col\">CandleCount</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let stockTradeStrategy of stockTradeStrategies\">\n            <td>{{stockTradeStrategy.ticker}}</td>\n            <td>{{stockTradeStrategy.interval}}</td>\n            <td>{{stockTradeStrategy.intervalDuration}}</td>\n            <td>{{stockTradeStrategy.timeUnit}}</td>\n            <td>{{stockTradeStrategy.state}}</td>\n            <td>{{stockTradeStrategy.candleCount}}</td>\n            <td>\n              <span class=\"edit\"\n                [routerLink]=\"['/trade-strategy-edit']\"  [queryParams]=\"{ ticker: stockTradeStrategy.ticker}\">Edit</span>\n              <!-- routerLink=\"trade-strategy-edit/{{stockTradeStrategy.ticker}}\">Edit</span> -->\n              <span class=\"delete\" (click)=\"deleteStockStrategy(stockTradeStrategy.ticker)\">Delete</span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n  </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { RestApiService } from \"../shared/rest-api.service\";\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { StockTradeStrategy } from \"../shared/stockTradeStrategy\";\nimport { TradeStrategy } from \"../shared/tradeStrategy\";\n\n@Component({\n  selector: 'trade-strategy-edit',\n  templateUrl: './trade-strategy-edit.component.html',\n  styleUrls: ['./trade-strategy-edit.component.css']\n})\n\nexport class TradeStrategyEditComponent implements OnInit {\n//  ticker = this.actRoute.snapshot.params['ticker'];\n  ticker : string;\n  strategyName : string;\n  stockTradeStrategy: any = {\n      \"ticker\": \"Enter your Ticker\",\n      \"quantity\": 10,\n      \"interval\": 1,\n      \"timeUnit\": \"MINUTES\",\n      \"intervalDuration\": \"ONE_MIN\",\n      \"tradeStrategy\":{\n      \"entryConditions\": \"function(barSeries, stockWatch){ \\n\\tclosePriceIndicator = new ClosePriceIndicator(barSeries);\\n\\tif(closePriceIndicator.getValue(barSeries.getEndIndex()).floatValue() < 568){\\n\\t\\tstockWatch.setStopLossPercentage(10.0);\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\",\n      \"entrySignal\": \"buy\",\n      \"exitSignal\": \"sell\",\n      \"exitConditions\": \"function(barSeries, stockWatch){ \\n\\tclosePriceIndicator = new ClosePriceIndicator(barSeries);\\n\\tif(closePriceIndicator.getValue(barSeries.getEndIndex()).floatValue() > 569){\\n\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n};\"\n      },\n      \"state\": \"WATCHING\",\n      \"stockWatch\":{\n      \"stopLossPercentage\": 5.0,\n      \"profitPercentage\": 20.0,\n      \"reenter\" : true\n      },\n      \"candleCount\": 1000\n    };\n  reEnterOptions : string[] = [\"true\",\"false\"];\n  intervalDurationOptions : string[] = [\"ONE_MIN\",\"FIVE_MINUTE\",\"FIFTEEN_MINUTE\",\"ONE_DAY\"];\n  tradeStrategyStates : string[] = [\"INACTIVE\",\"WATCHING\",\"ENTRY_ORDER_PENDING\",\"EXIT_ORDER_PENDING\",\"ENTERED\",\"COMPLETED\"];\n  timeUnit : string[] = [\"DAYS\",\"MINUTES\",\"HOURS\"];\n  loading : boolean = false;\n\n\n\n  constructor(\n    public restApi: RestApiService,\n    public actRoute: ActivatedRoute,\n    public router: Router\n  ) {\n    this.actRoute.queryParams.subscribe( params => {\n      console.log(params);\n      this.ticker = params[\"ticker\"];\n      this.strategyName = params[\"strategyName\"];\n       }\n    );\n\n  }\n\n  ngOnInit() {\n    this.getStockTradeStrategyFromParam();\n   }\n\n  getStockTradeStrategyFromParam() {\n    if(this.ticker != null) {\n      this.restApi.getStockTradeStrategy(this.ticker).subscribe(data => {\n        this.stockTradeStrategy = data;\n      })\n    } else {\n      this.restApi.getBackTestStrategy(this.strategyName).subscribe(data => {\n        let backTestStrategy = data;\n        this.stockTradeStrategy = new StockTradeStrategy();\n        this.stockTradeStrategy.ticker = backTestStrategy.backTestRequest.ticker;\n        this.stockTradeStrategy.quantity = backTestStrategy.backTestRequest.quantity;\n        this.stockTradeStrategy.interval = 1;\n        this.stockTradeStrategy.intervalDuration = backTestStrategy.backTestRequest.intervalDuration;\n        this.stockTradeStrategy.state = \"WATCHING\";\n        this.stockTradeStrategy.candleCount=backTestStrategy.backTestRequest.candleCount;\n        this.stockTradeStrategy.tradeStrategy = backTestStrategy.backTestRequest.tradeStrategy;\n        this.stockTradeStrategy.stockWatch = backTestStrategy.backTestRequest.stockWatch;\n        this.stockTradeStrategy.stockWatch.reenter = true;\n      })\n    }\n  }\n\n\n  getStockTradeStrategy() {\n    this.restApi.getStockTradeStrategy(this.stockTradeStrategy.ticker).subscribe(data => {\n      this.stockTradeStrategy = data;\n    })\n  }\n\n  // Update employee data\n  saveStockTradeStrategy() {\n    if(window.confirm('Are you sure, you want to save?')){\n      this.loading = true;\n      this.restApi.saveStockTradeStrategy(this.stockTradeStrategy).subscribe(data => {\n        this.stockTradeStrategy = data;\n        this.loading = false;\n      });\n    }\n  }\n\n\n}\n","<div class=\"container custom-container\">\n  <div class=\"col-md-12\">\n\n    <h3 class=\"mb-3 text-center\">Update Trade Strategy</h3>\n\n    <div class=\"form-group\">\n      <label>Ticker</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.ticker\" class=\"form-control\" placeholder=\"Ticker\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>Quantity</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.quantity\" class=\"form-control\" placeholder=\"Quantity\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>Interval</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.interval\" class=\"form-control\" placeholder=\"Interval\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>TimeUnit</label>\n      <select [(ngModel)]=\"stockTradeStrategy.timeUnit\" class=\"form-control\">\n        <option *ngFor=\"let option of timeUnit\">\n          {{option}}\n        </option>\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label>IntervalDuration</label>\n      <select [(ngModel)]=\"stockTradeStrategy.intervalDuration\" class=\"form-control\">\n        <option *ngFor=\"let option of intervalDurationOptions\">\n          {{option}}\n        </option>\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label>State</label>\n      <select [(ngModel)]=\"stockTradeStrategy.state\" class=\"form-control\">\n        <option *ngFor=\"let option of tradeStrategyStates\">\n          {{option}}\n        </option>\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label>CandleCount</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.candleCount\" class=\"form-control\" placeholder=\"Candle Count\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>StopLossPercentage</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.stockWatch.stopLossPercentage\" class=\"form-control\" placeholder=\"Stop Loss Percentage\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>profitPercentage</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.stockWatch.profitPercentage\" class=\"form-control\" placeholder=\"Profit Percentage\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>ReEnter?</label>\n      <select [(ngModel)]=\"stockTradeStrategy.stockWatch.reenter\" class=\"form-control\">\n        <option *ngFor=\"let option of reEnterOptions\">\n          {{option}}\n        </option>\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label>EntryConditions</label>\n      <br>\n        <textarea rows = \"15\" cols = \"80\" [(ngModel)]=\"stockTradeStrategy.tradeStrategy.entryConditions\"  placeholder=\"Entry Condition\">\n          Enter entry condition here\n        </textarea>\n      <br>\n    </div>\n\n    <div class=\"form-group\">\n      <label>EntrySignal</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.tradeStrategy.entrySignal\" class=\"form-control\" placeholder=\"Entry Signal\">\n    </div>\n\n    <div class=\"form-group\">\n      <label>ExitConditions</label>\n      <br>\n        <textarea rows = \"15\" cols = \"80\" [(ngModel)]=\"stockTradeStrategy.tradeStrategy.exitConditions\" placeholder=\"Exit Condition\">\n          Enter exit condition here\n        </textarea>\n      <br>\n    </div>\n\n    <div class=\"form-group\">\n      <label>ExitSignal</label>\n      <input type=\"text\" [(ngModel)]=\"stockTradeStrategy.tradeStrategy.exitSignal\" class=\"form-control\" placeholder=\"Exit Signal\">\n    </div>\n\n    <div class=\"app-loading\" *ngIf=\"loading\">\n      <div class=\"logo\"></div>\n     <svg class=\"spinner\" viewBox=\"25 25 50 50\">\n       <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\n     </svg>\n   </div>\n\n    <div class=\"form-group\">\n      <button class=\"btn btn-success btn-lg btn-block\" (click)=\"getStockTradeStrategy()\">fetch</button>\n    </div>\n\n    <div class=\"form-group\">\n      <button class=\"btn btn-success btn-lg btn-block\" (click)=\"saveStockTradeStrategy()\">Update</button>\n    </div>\n\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}